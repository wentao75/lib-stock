{"version":3,"file":"lib-stock.js","sources":["src/util.js","src/transaction-engine.js","src/momentum-breakthrough.js","src/simulator.js","src/stoploss.js"],"sourcesContent":["function formatFxstr(num) {\n    return num.toLocaleString(\"zh-CN\"); //, { style: \"currency\", currency: \"CNY\" });\n}\n\nexport { formatFxstr };\n","// const moment = require(\"moment\");\n// const _ = require(\"lodash\");\n// import moment from \"moment\";\nimport _ from \"lodash\";\nimport { formatFxstr } from \"./util\";\nimport debugpkg from \"debug\";\n\nconst debug = debugpkg(\"trans\");\n\n/**\n * 主处理过程\n * 1. 当前持仓是否需要止损，options.stoploss指定算法执行止损，如果止损立刻清算并记录\n * 2. 卖出算法执行是否卖出，如果卖出，清算并记录\n * 3. 买入算法执行是否买入，如果买入，清算并记录\n *\n * TODO：主过程可以考虑持有多次买入，这样只要记录相应的总投入即可\n *\n * @param {*} tradeDate 当前计算交易日\n * @param {*} index 当前日股票数据索引\n * @param {*} stockData 股票数据信息\n * @param {*} stockInfo 股票信息\n * @param {*} capitalData 账户信息\n * @param {*} options 算法参数\n */\nasync function executeTransaction(\n    tradeMethod,\n    // tradeDate,\n    index,\n    stockData,\n    capitalData,\n    options\n) {\n    let translog = null;\n    // 首先检查卖出\n    // 所有算法首先检查并处理止损\n    // 检查是否需要止损\n    let tradeDate = stockData[index].trade_date;\n    let stockInfo = capitalData.info;\n    if (options.stoploss) {\n        translog = options.stoploss.checkStoplossTransaction(\n            stockInfo,\n            capitalData && capitalData.stock,\n            // tradeDate,\n            index,\n            stockData,\n            options\n        );\n        if (\n            executeCapitalSettlement(\n                // tradeDate,\n                stockInfo,\n                translog,\n                capitalData,\n                options\n            )\n        ) {\n            debug(\n                `卖出止损：${tradeDate}，价格：${formatFxstr(\n                    translog.price\n                )}元，数量：${\n                    translog.count / 100\n                }手，总价：${translog.total.toFixed(\n                    2\n                )}元[佣金${translog.commission.toFixed(\n                    2\n                )}元，过户费${translog.fee.toFixed(\n                    2\n                )}，印花税${translog.duty.toFixed(2)}元], ${translog.memo}`\n            );\n            // return translog;\n        }\n    }\n\n    // debug(\"执行卖出检查\");\n    translog = tradeMethod.checkSellTransaction(\n        stockInfo,\n        capitalData && capitalData.stock,\n        // tradeDate,\n        index,\n        stockData,\n        options\n    );\n    if (\n        executeCapitalSettlement(\n            // tradeDate,\n            stockInfo,\n            translog,\n            capitalData,\n            options\n        )\n    ) {\n        debug(\n            `卖出交易：${tradeDate}，价格：${translog.price.toFixed(\n                2\n            )}元，数量：${\n                translog.count / 100\n            }手，总价：${translog.total.toFixed(\n                2\n            )}元[佣金${translog.commission.toFixed(\n                2\n            )}元，过户费${translog.fee.toFixed(\n                2\n            )}，印花税${translog.duty.toFixed(2)}元], ${translog.memo}`\n        );\n        // return translog;\n    }\n\n    // 检查是否仍然有持仓\n    if (capitalData && capitalData.stock && capitalData.stock.count > 0) return;\n    // 执行买入\n    // debug(\"执行买入检查\");\n    let cash = capitalData.balance;\n    if (options.fixCash) cash = options.initBalance;\n    translog = tradeMethod.checkBuyTransaction(\n        stockInfo,\n        cash,\n        // tradeDate,\n        index,\n        stockData,\n        options\n    );\n    // debug(`买入结果：%o`, translog);\n    if (\n        executeCapitalSettlement(\n            // tradeDate,\n            stockInfo,\n            translog,\n            capitalData,\n            options\n        )\n    ) {\n        debug(\n            `买入交易：${tradeDate}，价格：${translog.price.toFixed(\n                2\n            )}元，数量：${\n                translog.count / 100\n            }手，总价：${translog.total.toFixed(\n                2\n            )}元[佣金${translog.commission.toFixed(\n                2\n            )}元，过户费${translog.fee.toFixed(\n                2\n            )}，印花税${translog.duty.toFixed(2)}元], ${translog.memo}`\n        );\n        // debug(`股票信息：%o`, stockInfo);\n        // debug(`账户信息：%o`, capitalData);\n        // return translog;\n    }\n}\n\n/**\n * 根据交易记录完成账户清算\n * @param {*} stockInfo 股票信息\n * @param {*} translog 交易记录\n * @param {*} capitalData 账户数据\n * @param {*} options 配置参数\n */\nfunction executeCapitalSettlement(\n    // tradeDate,\n    stockInfo,\n    translog,\n    capitalData,\n    options\n) {\n    // debug(`执行清算 %o`, translog);\n    if (_.isEmpty(translog)) return false;\n    // 检查当前提供的交易是否可以进行，主要是针对累计账户买卖\b模式下买入交易是否会造成余额不足\n    if (!options.fixCash && translog.total + capitalData.balance < 0) {\n        debug(\n            `账户余额${capitalData.balance}不足(${\n                translog.total\n            })，无法完成清算，交易取消! 交易信息: ${\n                translog.type === \"buy\" ? \"买入\" : \"卖出\"\n            }${stockInfo.ts_code} ${translog.count}股，价格${\n                translog.price\n            }，共计${translog.total}元[含佣金${translog.commission}元，过户费${\n                translog.fee\n            }，印花税${translog.duty}元]`\n        );\n        return false;\n    }\n\n    // 处理交易信息\n    capitalData.balance += translog.total;\n    // 如果当前买入，stock中放置持股信息和买入交易日志，只有卖出发生时才合并生成一条交易记录，包含两个部分\n    if (translog.type === \"buy\") {\n        capitalData.stock = {\n            //info: stockInfo,\n            count: translog.count,\n            price: translog.price,\n            buy: translog,\n        };\n    } else {\n        let settledlog = {\n            tradeDate: translog.tradeDate,\n            profit: capitalData.stock.buy.total + translog.total,\n            income:\n                translog.count * translog.price -\n                capitalData.stock.count * capitalData.stock.price,\n            buy: capitalData.stock.buy,\n            sell: translog,\n        };\n        capitalData.stock = {\n            //info: null,\n            count: 0,\n            price: 0,\n        };\n        capitalData.transactions.push(settledlog);\n    }\n    // debug(\"完成清算！\");\n    return true;\n}\n\n/**\n * 创建指定日期和股票信息的卖出交易\n * @param {*} stockInfo\n * @param {*} tradeDate\n * @param {*} tradeDateIndex\n * @param {*} count\n * @param {*} price\n * @param {*} memo\n */\nfunction createSellTransaction(\n    stockInfo,\n    tradeDate,\n    tradeDateIndex,\n    count,\n    price,\n    methodType,\n    memo\n) {\n    // 计算费用\n    let total = calculateTransactionFee(false, stockInfo, count, price);\n    // 创建卖出交易记录\n    return {\n        date: tradeDate,\n        dateIndex: tradeDateIndex,\n        type: \"sell\",\n        count,\n        price,\n        total: total.total,\n        amount: total.amount,\n        fee: total.fee,\n        commission: total.commission,\n        duty: total.duty,\n        methodType,\n        memo,\n    };\n}\n\n/**\n * 构建买入交易信息\n * @param {*} stockInfo 股票信息\n * @param {*} tradeDate 交易日期\n * @param {*} tradeDateIndex 交易日期索引（方便用于计算交易日数）\n * @param {*} balance 可用余额\n * @param {*} price 买入价格\n * @param {*} memo 交易备注\n */\nfunction createBuyTransaction(\n    stockInfo,\n    tradeDate,\n    tradeDateIndex,\n    balance,\n    price,\n    methodType,\n    memo\n) {\n    // 计算费用\n    let count = parseInt(balance / price / 100) * 100;\n    // 最小交易单位为1手，资金不足放弃！\n    if (count < 100) return;\n    let total = calculateTransactionFee(true, stockInfo, count, price);\n    while (total.total + balance < 0) {\n        count -= 100;\n        if (count < 100) return;\n        total = calculateTransactionFee(true, stockInfo, count, price);\n    }\n    // 创建买入交易记录\n    return {\n        date: tradeDate,\n        dateIndex: tradeDateIndex,\n        type: \"buy\",\n        count: count,\n        price,\n        total: total.total,\n        amount: total.amount,\n        fee: total.fee,\n        commission: total.commission,\n        duty: total.duty,\n        methodType,\n        memo,\n    };\n}\n\n/**\n * 计算交易价格和费用\n * @param {boolean}} buy 买卖标记\n * @param {*} stockInfo 股票信息\n * @param {*} count 买卖数量\n * @param {*} price 买卖单价\n */\nfunction calculateTransactionFee(buy, stockInfo, count, price) {\n    let amount = count * price;\n    let commission = (amount * 0.25) / 1000;\n    let fee = 0.0;\n    let duty = 0.0;\n    if (stockInfo.exchange === \"SSE\") {\n        // 上海，过户费千分之0.2\n        fee += (amount * 0.02) / 1000;\n    } else if (stockInfo.exchange === \"SZSE\") {\n        // 深圳，无\n    }\n    // 印花税，仅对卖方收取\n    if (!buy) {\n        duty += (amount * 1) / 1000;\n    }\n\n    let total = 0.0;\n    if (buy) {\n        total = 0 - (amount + commission + fee + duty);\n    } else {\n        total = amount - commission - fee - duty;\n    }\n\n    return { total, amount, commission, fee, duty };\n}\n\nfunction parseCapital(capitalData) {\n    if (_.isEmpty(capitalData)) return;\n    // 账户信息中主要需分析交易过程，正常都是为一次买入，一次卖出，这样作为一组交易，获得一次盈利结果\n    let count = capitalData.transactions.length;\n    let count_win = 0;\n    let total_win = 0;\n    let count_loss = 0;\n    let total_loss = 0;\n    let total_profit = 0;\n    let total_fee = 0;\n    let max_profit = 0;\n    let max_loss = 0;\n    let average_profit = 0;\n    let average_win = 0;\n    let average_loss = 0;\n    let max_wintimes = 0; // 连续盈利次数\n    let max_losstimes = 0; // 连续亏损次数\n    let max_windays = 0;\n    let max_lossdays = 0;\n    let average_windays = 0;\n    let average_lossdays = 0;\n    // {times: 总次数, win_times: 盈利次数, loss_times: 损失次数}\n    let selltypes = {};\n    //let selltype_times = {};\n\n    // 收益率：表示单位成本的收入比例\n    let ror_win = 0;\n    let ror_loss = 0;\n    let ror = 0;\n\n    let tmp_cost = 0;\n    let tmp_cost_win = 0;\n    let tmp_cost_loss = 0;\n\n    let currentType = 0;\n    let tmp_times = 0;\n    let tmp_windays = 0;\n    let tmp_lossdays = 0;\n    for (let log of capitalData.transactions) {\n        let days = log.sell.dateIndex - log.buy.dateIndex + 1;\n\n        let selltype = selltypes[log.sell.methodType];\n        if (!selltype) {\n            selltypes[log.sell.methodType] = {\n                times: 0,\n                win_times: 0,\n                loss_times: 0,\n            };\n        }\n        selltypes[log.sell.methodType].times += 1;\n\n        if (log.profit >= 0) {\n            count_win++;\n            total_win += log.profit;\n            tmp_cost_win += -log.buy.total;\n            if (max_profit < log.profit) max_profit = log.profit;\n\n            tmp_windays += days;\n            if (max_windays < days) max_windays = days;\n\n            // 连续计数\n            if (currentType === 1) {\n                tmp_times++;\n            } else {\n                if (currentType === -1) {\n                    if (max_losstimes < tmp_times) max_losstimes = tmp_times;\n                }\n                // 初始化\n                currentType = 1;\n                tmp_times = 1;\n            }\n\n            selltypes[log.sell.methodType].win_times += 1;\n        } else {\n            count_loss++;\n            total_loss += log.profit;\n            tmp_cost_loss += -log.buy.total;\n            if (max_loss > log.profit) max_loss = log.profit;\n\n            tmp_lossdays += days;\n            if (max_lossdays < days) max_lossdays = days;\n\n            // 连续计数\n            if (currentType === -1) {\n                tmp_times++;\n            } else {\n                if (currentType === 1) {\n                    if (max_wintimes < tmp_times) max_wintimes = tmp_times;\n                }\n                // 初始化\n                currentType = -1;\n                tmp_times = 1;\n            }\n\n            selltypes[log.sell.methodType].loss_times += 1;\n        }\n\n        total_profit += log.profit;\n        total_fee +=\n            log.buy.commission +\n            log.buy.fee +\n            log.buy.duty +\n            (log.sell.commission + log.sell.fee + log.sell.duty);\n        tmp_cost += -log.buy.total;\n    }\n\n    if (currentType === 1) {\n        if (max_wintimes < tmp_times) max_wintimes = tmp_times;\n    } else if (currentType === -1) {\n        if (max_losstimes < tmp_times) max_losstimes = tmp_times;\n    }\n\n    average_profit = total_profit / count;\n    average_win = total_win / count_win;\n    average_loss = -total_loss / count_loss;\n\n    average_windays = Number((tmp_windays / count_win).toFixed(1));\n    average_lossdays = Number((tmp_lossdays / count_loss).toFixed(1));\n\n    ror = total_profit / tmp_cost;\n    ror_win = total_win / tmp_cost_win;\n    ror_loss = total_loss / tmp_cost_loss;\n\n    return {\n        count,\n        total_profit,\n        total_fee,\n        count_win,\n        total_win,\n        count_loss,\n        total_loss,\n        max_profit,\n        max_loss,\n        average_profit,\n        average_win,\n        average_loss,\n        max_wintimes,\n        max_losstimes,\n        max_windays,\n        max_lossdays,\n        average_windays,\n        average_lossdays,\n        selltypes,\n\n        ror,\n        ror_win,\n        ror_loss,\n    };\n}\n\nfunction logCapitalReport(log, capitalData) {\n    log(\n        `******************************************************************************************`\n    );\n    // log(\n    //     \"*                                                                                                                      *\"\n    // );\n    if (capitalData.stock && capitalData.stock.count > 0) {\n        log(\n            `  账户价值 ${formatFxstr(\n                capitalData.balance +\n                    capitalData.stock.count * capitalData.stock.price\n            )}元  【余额 ${formatFxstr(\n                capitalData.balance\n            )}元, 持股: ${formatFxstr(\n                capitalData.stock.count * capitalData.stock.price\n            )}元】`\n        );\n    } else {\n        log(`  账户余额 ${formatFxstr(capitalData.balance)}元`);\n    }\n\n    let capitalResult = parseCapital(capitalData);\n    // log(``);\n    log(\n        `  总净利润：${formatFxstr(capitalResult.total_profit)},  收益率 ${(\n            capitalResult.ror * 100\n        ).toFixed(2)}%`\n    );\n    log(\n        `  毛利润： ${formatFxstr(\n            capitalResult.total_win\n        )},  总亏损：${formatFxstr(capitalResult.total_loss)}`\n    );\n    log(\n        `  盈利收益率： ${(capitalResult.ror_win * 100).toFixed(\n            2\n        )}%,  亏损收益率：${(capitalResult.ror_loss * 100).toFixed(2)}%`\n    );\n    log(\"\");\n    log(\n        `  总交易次数： ${capitalResult.count},  利润率：${(\n            (capitalResult.count_win * 100) /\n            capitalResult.count\n        ).toFixed(1)}%`\n    );\n    log(\n        `  总盈利次数： ${capitalResult.count_win},  总亏损次数：${capitalResult.count_loss}`\n    );\n    log(\"\");\n    log(\n        `  最大单笔盈利： ${formatFxstr(\n            capitalResult.max_profit\n        )},  最大单笔亏损：${formatFxstr(capitalResult.max_loss)}`\n    );\n    log(\n        `  平均盈利： ${formatFxstr(\n            capitalResult.average_win\n        )},  平均亏损：${formatFxstr(capitalResult.average_loss)}`\n    );\n    log(\n        `  平均盈利/平均亏损： ${(\n            capitalResult.average_win / capitalResult.average_loss\n        ).toFixed(2)},  平均每笔总盈利：${formatFxstr(\n            capitalResult.average_profit\n        )}`\n    );\n    log(\"\");\n    log(\n        `  最多连续盈利次数： ${capitalResult.max_wintimes},  最多连续亏损次数：${capitalResult.max_losstimes}`\n    );\n    log(\n        `  盈利最多持有天数： ${capitalResult.max_windays},  亏损最多持有天数：${capitalResult.max_lossdays}`\n    );\n    log(\n        `  盈利平均持有天数： ${capitalResult.average_windays},  亏损平均持有天数：${capitalResult.average_lossdays}`\n    );\n\n    log(\"\");\n    for (let methodType in capitalResult.selltypes) {\n        let selltype = capitalResult.selltypes[methodType];\n        log(\n            `  卖出类型${methodType} 共${selltype.times}次,  盈利${selltype.win_times}次， 损失${selltype.loss_times}次`\n        );\n    }\n    // log(\n    //     \"*                                                                                                                      *\"\n    // );\n    log(\n        `******************************************************************************************`\n    );\n    log(\"\");\n}\n\nfunction logTransactions(log, capitalData) {\n    log(`  交易日志分析\n******************************************************************************************`);\n    for (let translog of capitalData.transactions) {\n        log(logTransaction(translog));\n    }\n    if (capitalData.stock && capitalData.stock.count > 0) {\n        let holdlog = { buy: capitalData.stock.buy };\n        log(logTransaction(holdlog));\n    }\n    log(\n        `******************************************************************************************`\n    );\n}\n\n// settledlog = {\n//     tradeDate: translog.tradeDate,\n//     profit: capitalData.stock.buy.total + translog.total,\n//     income:\n//         translog.count * translog.price -\n//         capitalData.stock.count * capitalData.stock.price,\n//     buy: capitalData.stock.buy,\n//     sell: translog,\n// };\n// trans: {\n// date: tradeDate.format(\"YYYYMMDD\"),\n// dateIndex: tradeDateIndex,\n// type: \"sell\",\n// count,\n// price,\n// total: total.total,\n// amount: total.amount,\n// fee: total.fee,\n// commission: total.commission,\n// duty: total.duty,\n// methodType,\n// memo,\n// }\nfunction logTransaction(translog) {\n    if (!translog) return \"\";\n    let buy = translog.buy;\n    let sell = translog.sell;\n    if (sell) {\n        return `收入：${formatFxstr(translog.profit)}, 持有 ${\n            sell.dateIndex - buy.dateIndex + 1\n        }天，盈利 ${(-(translog.profit * 100) / buy.total).toFixed(2)}%\n       [买入 ${buy.date}, ${formatFxstr(buy.price)}, ${\n            buy.count\n        }, ${formatFxstr(buy.total)}] \n       [卖出 ${sell.date}, ${formatFxstr(sell.price)}, ${\n            sell.count\n        }, ${formatFxstr(sell.total)}, ${sell.methodType}, ${sell.memo}]`;\n    } else {\n        // 持有未卖出\n        return `收入：---, 持有 ---天，盈利 ---\n       [买入 ${buy.date}, ${formatFxstr(buy.price)}, ${\n            buy.count\n        }, ${formatFxstr(buy.total)}]`;\n    }\n}\n\nexport default {\n    executeTransaction,\n    executeCapitalSettlement,\n    createSellTransaction,\n    createBuyTransaction,\n    calculateTransactionFee,\n    parseCapital,\n    logCapitalReport,\n    logTransactions,\n};\n","import _ from \"lodash\";\nimport engine from \"./transaction-engine\";\n\nimport debugpkg from \"debug\";\nconst debug = debugpkg(\"mmb\");\n\n/**\n * 检查买入条件\n * @param {*} stockInfo 股票信息\n * @param {double} balance 账户余额\n * @param {*} tradeDate 交易日期\n * @param {int} index 交易日数据索引位置\n * @param {*} stockData 数据\n * @param {*} options 算法参数\n */\nfunction checkMMBBuyTransaction(stockInfo, balance, index, stockData, options) {\n    if (balance <= 0) return;\n    // debug(`买入检查: ${balance}, ${tradeDate}, %o, ${index}`, stockData);\n\n    // 平均波幅的计算日数\n    let N = (options && options.N) || 1;\n    // 波幅突破的百分比\n    let P = (options && options.P) || 0.5;\n\n    let moment = 0;\n    for (let i = 0; i < N; i++) {\n        if (index - i - 1 >= 0) {\n            let tmp = stockData[index - i - 1];\n            if (options.mmbType === \"hl\") {\n                moment += tmp.high - tmp.low;\n            } else {\n                moment += tmp.high - tmp.close;\n            }\n        }\n    }\n    moment = moment / N;\n\n    let currentData = stockData[index];\n    // console.log(`跟踪信息： ${stockData.length}, ${index}`, currentData);\n    let targetPrice = currentData.open + moment * P;\n    let tradeDate = stockData[index].trade_date;\n\n    debug(\n        `买入条件检查${tradeDate}: ${targetPrice.toFixed(2)}=${\n            currentData.open\n        }+${moment.toFixed(2)}*${P} [o: ${currentData.open}, h: ${\n            currentData.high\n        }, l: ${currentData.low}, c: ${currentData.close}, d: ${\n            currentData.trade_date\n        }]`\n    );\n    if (currentData.high >= targetPrice && currentData.open <= targetPrice) {\n        // 执行买入交易\n        debug(`符合条件：${tradeDate}`);\n        return engine.createBuyTransaction(\n            stockInfo,\n            tradeDate,\n            index,\n            balance,\n            targetPrice,\n            \"mmb\",\n            `动能突破买入 ${targetPrice.toFixed(2)} (=${\n                currentData.open\n            }+${moment.toFixed(2)}*${(P * 100).toFixed(2)}%)`\n        );\n    }\n}\n\n/**\n * 检查是否可以生成卖出交易，如果可以卖出，产生卖出交易记录\n *\n * @param {*} info 股票信息\n * @param {*} stock 持仓信息\n * @param {*} index 今日数据索引位置\n * @param {*} stockData 日线数据\n * @param {*} options 算法参数\n */\nfunction checkMMBSellTransaction(stockInfo, stock, index, stockData, options) {\n    if (_.isEmpty(stock) || stock.count <= 0) return;\n\n    // 检查是否符合动能突破买入条件\n    if (\n        !options.nommbsell &&\n        !_.isEmpty(\n            checkMMBBuyTransaction(\n                stockInfo,\n                options.initBalance,\n                index,\n                stockData,\n                options\n            )\n        )\n    ) {\n        // 可以买入，那么当日保持\n        return;\n    }\n\n    let currentData = stockData[index];\n    let tradeDate = currentData.trade_date;\n\n    // 目前有持仓，检查是否达到盈利卖出条件\n    if (!options.nommb1 && currentData.open > stock.price) {\n        // 采用第二天开盘价盈利就卖出的策略\n        debug(\n            `开盘盈利策略符合：${currentData.open.toFixed(\n                2\n            )} (> ${stock.price.toFixed(2)})`\n        );\n        return engine.createSellTransaction(\n            stockInfo,\n            tradeDate,\n            index,\n            stock.count,\n            currentData.open,\n            \"mmb1\",\n            `开盘盈利卖出 ${currentData.open} (> ${stock.price.toFixed(2)})`\n        );\n    }\n\n    if (!options.nommb2) {\n        // 平均波幅的计算日数\n        let N = (options && options.N) || 1;\n        // 止损使用的波幅下降百分比\n        let L = (options && options.L) || 0.5;\n        // 有持仓，检查是否达到卖出条件\n        // 第一个卖出条件是买入后按照买入价格及波动数据的反向百分比设置\n        let moment = 0;\n        for (let i = 0; i < N; i++) {\n            if (index - i - 1 >= 0) {\n                let tmp = stockData[index - i - 1];\n                if (options.mmbType === \"hl\") {\n                    moment += tmp.high - tmp.low;\n                } else {\n                    moment += tmp.high - tmp.close;\n                }\n            }\n        }\n        moment = moment / N;\n\n        let targetPrice = currentData.open - moment * L;\n        // let targetPrice2 = stock.price - moment * L;\n        // let targetPrice =\n        //     targetPrice1 >= targetPrice2 ? targetPrice1 : targetPrice2;\n\n        if (targetPrice <= currentData.open && targetPrice >= currentData.low) {\n            // 执行波动卖出\n            return engine.createSellTransaction(\n                stockInfo,\n                tradeDate,\n                index,\n                stock.count,\n                targetPrice,\n                \"mmb2\",\n                `动能突破卖出：${targetPrice.toFixed(2)} (= ${\n                    currentData.open\n                }-${moment.toFixed(2)}*${L * 100}%)`\n            );\n        }\n    }\n}\n\nlet mmb = {\n    name: \"MMB\",\n    description: \"动能穿透\",\n    methodTyps: {\n        mmb: \"动能突破买入\",\n        mmb1: \"开盘盈利卖出\",\n        mmb2: \"动能突破卖出\",\n    },\n    checkBuyTransaction: checkMMBBuyTransaction,\n    checkSellTransaction: checkMMBSellTransaction,\n};\n\nexport default mmb;\n","import {\n    readStockList,\n    readStockData,\n    stockDataNames,\n} from \"@wt/lib-wtda-query\";\n\nimport moment from \"moment\";\nimport _ from \"lodash\";\nimport debugpkg from \"debug\";\n\n// import { formatFxstr } from \"./util\";\n\n// import stoploss from \"./stoploss\";\nimport mmb from \"./momentum-breakthrough\";\nimport engine from \"./transaction-engine\";\n\nconst log = console.log;\nconst debug = debugpkg(\"sim\");\n\nasync function simulate(options) {\n    // 首先根据设置获得列表，列表内容为需要进行算法计算的各个股票\n    //  TODO: 这里先读取全部的列表\n    let stockListData = await readStockList();\n    if (!stockListData || !stockListData.data) {\n        log(`没有读取到股票列表，无法处理日线数据`);\n        return;\n    }\n    let stockList = stockListData.data;\n    // 重新过滤可用的\n    stockList = await filterStockList(stockList, options);\n    log(`算法执行 ${stockList && stockList.length} 条数据`);\n    // data存放股票列表的基本信息：\n    // {\n    //      ts_code: '000001.SZ', symbol: '000001', name: '平安银行',\n    //      market: '主板', exchange: 'SZSE',\n    //      area: '深圳', industry: '银行', fullname: '平安银行股份有限公司',\n    //      enname: 'Ping An Bank Co., Ltd.', curr_type: 'CNY',\n    //      list_status: 'L', list_date: '19910403', delist_date: null, is_hs: 'S'\n    // }\n    // this.log(`%o`, stockList[0]);\n    // 后续的执行为列表的循环计算，这里的算法因为主要是CPU计算类型，只有输入和输出部分有I/O运算，因此不考虑\n\n    log(\"\");\n    // 下一步开始按照给出的数据循环进行处理\n    for (let stockItem of stockList) {\n        // this.log(`处理数据：%o`, stockItem);\n\n        // 首先读取日线信息\n        let stockData = await readStockData(\n            stockDataNames.daily,\n            stockItem.ts_code\n        );\n        // 准备资金账户数据\n        let capitalData = {\n            info: stockItem,\n            balance: options.initBalance, // 初始资金\n            stock: { info: null, count: 0, price: 0 }, // 持有股票信息\n            transactions: [], // 交易记录 {date: , count: 交易数量, price: 交易价格, total: 总金额, amount: 总价, fee: 交易费用, memo: 备注信息}\n        };\n        if (stockData) {\n            log(\n                `[${stockItem.ts_code}]${\n                    stockItem.name\n                } 【数据更新时间：${moment(stockData.updateTime).format(\n                    \"YYYY-MM-DD HH:mm\"\n                )}】`\n            );\n            // 日线数据条数 ${\n            //     stockData.data && stockData.data.length\n            // }, 从${stockData.startDate}到${\n            //     stockData.endDate\n            // }，\n\n            // 首先过滤历史数据，这里将日线数据调整为正常日期从历史到现在\n            stockData = await filterStockData(stockData);\n\n            // 全部数据调整为前复权后再执行计算\n            calculatePrevAdjPrice(stockData);\n\n            // 开始按照日期执行交易算法\n            let startDate = moment(options.startDate, \"YYYYMMDD\");\n            let currentDate = null;\n            for (let index = 0; index < stockData.data.length; index++) {\n                let daily = stockData.data[index];\n                let tradeDate = moment(daily.trade_date, \"YYYYMMDD\");\n                if (_.isEmpty(currentDate)) {\n                    if (startDate.isAfter(tradeDate)) {\n                        continue;\n                    }\n                    debug(\n                        `找到开始日期，开始执行算法！${index}, ${daily.trade_date}`\n                    );\n                }\n                currentDate = tradeDate;\n                // this.log(`%o`, engine);\n                let trans = await engine.executeTransaction(\n                    mmb,\n                    index,\n                    stockData.data,\n                    capitalData,\n                    options\n                );\n            }\n\n            engine.logCapitalReport(log, capitalData);\n            if (options.showTrans) {\n                engine.logTransactions(log, capitalData);\n            }\n        } else {\n            log(\n                `[${stockItem.ts_code}]${stockItem.name} 没有日线数据，请检查！`\n            );\n        }\n    }\n}\n\n/**\n * 将日线数据中的历史价位根据复权因子全部处理为前复权结果，方便后续计算\n *\n * @param {*} dailyData 日线数据\n * @param {int} digits 保留位数\n */\nfunction calculatePrevAdjPrice(dailyData, digits = 2) {\n    if (dailyData && dailyData.data && dailyData.data.length > 0) {\n        dailyData.data.forEach((item) => {\n            if (item.prevadj_factor) {\n                item.open = Number(\n                    (item.open * item.prevadj_factor).toFixed(digits)\n                );\n                item.close = Number(\n                    (item.close * item.prevadj_factor).toFixed(digits)\n                );\n                item.high = Number(\n                    (item.high * item.prevadj_factor).toFixed(digits)\n                );\n                item.low = Number(\n                    (item.low * item.prevadj_factor).toFixed(digits)\n                );\n                item.pre_close = Number(\n                    (item.pre_close * item.prevadj_factor).toFixed(digits)\n                );\n                item.change = Number(\n                    (item.change * item.prevadj_factor).toFixed(digits)\n                );\n            }\n        });\n    }\n}\n\n/**\n * 这里定义一个过滤列表的接口方法，利用options来过滤后续使用的股票\n * 返回为一个符合条件的列表\n * 这里后续考虑调整一下接口定义，目前暂时简化处理\n */\nasync function filterStockList(stockList, options) {\n    // let retStockList = [];\n    return options.selectedStocks.map((tsCode) => {\n        let tmp = stockList.filter((item) => {\n            return item.ts_code === tsCode;\n        });\n        // console.log(`${tmp && tmp.length}, %o`, tmp[0]);\n        return tmp[0];\n    });\n}\n\n/**\n * 这里提供对单个数据的调整，主要应当是一些额外的数据计算添加，周期过滤等\n *\n * @param {*} stockData 股票日线数据对象\n * @param {*} options 数据过滤条件\n */\nasync function filterStockData(stockData, options) {\n    stockData.data.reverse();\n    return stockData;\n}\n\nexport default simulate;\n","// const _ = require(\"lodash\");\nimport _ from \"lodash\";\n// const engine = require(\"./transaction-engine\");\nimport engine from \"./transaction-engine\";\n\n/**\n * 检查是否需要执行止损\n * @param {*} stock 持仓信息\n * @param {int} index 交易日索引位置\n * @param {*} stockData 日线数据\n */\nfunction checkStoplossTransaction(stockInfo, stock, index, stockData, options) {\n    if (_.isEmpty(stock) || stock.count <= 0) return;\n    let currentData = stockData[index];\n    // 止损最大损失比例\n    let S = (options && options.S) || 0.1;\n\n    // 这里检查纯粹的百分比止损\n    let lossPrice = stock.price * (1 - S);\n    let tradeDate = currentData.trade_date;\n    if (currentData.low <= lossPrice) {\n        // 当日价格范围达到止损值\n        return engine.createSellTransaction(\n            stockInfo,\n            tradeDate,\n            index,\n            stock.count,\n            lossPrice,\n            \"stoploss\",\n            `止损 ${lossPrice.toFixed(2)} (=${stock.price.toFixed(2)}*(1-${\n                S * 100\n            }%))`\n        );\n    }\n}\n\nlet stoploss = {\n    name: \"SL\",\n    description: \"止损\",\n    methodTypes: {\n        stoploss: \"止损卖出\",\n    },\n    checkStoplossTransaction,\n};\n\nexport default stoploss;\n"],"names":["formatFxstr","num","toLocaleString","debug","debugpkg","executeTransaction","tradeMethod","index","stockData","capitalData","options","translog","tradeDate","trade_date","stockInfo","info","stoploss","checkStoplossTransaction","stock","executeCapitalSettlement","price","count","total","toFixed","commission","fee","duty","memo","checkSellTransaction","cash","balance","fixCash","initBalance","checkBuyTransaction","_","isEmpty","type","ts_code","buy","settledlog","profit","income","sell","transactions","push","createSellTransaction","tradeDateIndex","methodType","calculateTransactionFee","date","dateIndex","amount","createBuyTransaction","parseInt","exchange","parseCapital","length","count_win","total_win","count_loss","total_loss","total_profit","total_fee","max_profit","max_loss","average_profit","average_win","average_loss","max_wintimes","max_losstimes","max_windays","max_lossdays","average_windays","average_lossdays","selltypes","ror_win","ror_loss","ror","tmp_cost","tmp_cost_win","tmp_cost_loss","currentType","tmp_times","tmp_windays","tmp_lossdays","log","days","selltype","times","win_times","loss_times","Number","logCapitalReport","capitalResult","logTransactions","logTransaction","holdlog","checkMMBBuyTransaction","N","P","moment","i","tmp","mmbType","high","low","close","currentData","targetPrice","open","engine","checkMMBSellTransaction","nommbsell","nommb1","nommb2","L","mmb","name","description","methodTyps","mmb1","mmb2","console","simulate","stockListData","readStockList","data","stockList","filterStockList","stockItem","readStockData","stockDataNames","daily","updateTime","format","filterStockData","calculatePrevAdjPrice","startDate","currentDate","isAfter","trans","showTrans","dailyData","digits","forEach","item","prevadj_factor","pre_close","change","selectedStocks","map","tsCode","filter","reverse","S","lossPrice","methodTypes"],"mappings":"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"}